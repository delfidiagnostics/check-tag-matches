name: check-tag-matches
description: Check if there is a docker image in ECR with the specified commit-id and a tag with the semantic release candidate versiona
inputs:
  ecr_role_arn: 
    description: The role used to connect to AWS ECR. e.g. arn:aws:iam::016272216798:role/ecr-rw-lis-repos
    required: true
  ecr_repo_name:  
    description: The repo where the image is located. e.g. lis/example-repo
    required: true
  image_id:  
    description: The git commit-id used to tag the image. e.g. 640d4bfde8e84759a37050b172f061fd11c1d621
    required: true
  image_tag:
    description: The semantic version used to tag the image. e.g. 1.0.0
    required: true
  aws_region:
    description: AWS aws_region
    required: false
    default: 'us-west-2'

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{inputs.ecr_role_arn}}
        role-duration-seconds: 1200
        aws-region: ${{inputs.aws_region}}
        mask-aws-account-id: 'false'
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1.5.3
    - name: check release tag matches stage
      id: check-tag
      shell: bash
      run: |
        echo "tag_matches=$(aws ecr describe-images --no-cli-pager --no-paginate --repository-name ${{inputs.ecr_repo_name}} --image-ids imageTag=${{inputs.image_id}} --query "length(imageDetails[].imageTags[?starts_with(@, '${{inputs.image_tag}}')][])")" >> "$GITHUB_OUTPUT"
    - name: check release tag
      uses: actions/github-script@v3
      if: (steps.check-tag.outputs.tag_matches == 0)
      with:
        script: |
          core.setFailed('The image with commit-id ${{inputs.image_id}} does not have a tag with release candidate ${{inputs.image_tag}}-rc.X')
